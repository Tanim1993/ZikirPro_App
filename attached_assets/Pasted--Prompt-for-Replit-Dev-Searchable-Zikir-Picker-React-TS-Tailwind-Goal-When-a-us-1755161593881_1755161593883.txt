# Prompt for Replit Dev — **Searchable Zikir Picker (React + TS + Tailwind)**

**Goal:** When a user opens “Select Zikir”, show a searchable list (Arabic / transliteration / English). Selecting one returns the chosen zikir object. Data comes from our static **100-zikir JSON** list.

---

## 1) Files & Data (use this structure)

* `shared/data/zikir.json` ← put the 100-item list here (fields: `id, name, arabic, transliteration, translation, category`).
* `client/src/lib/zikir.ts` ← small helper to load + search.
* `client/src/components/ZikirPicker.tsx` ← searchable UI (modal or inline).
* `client/src/types/zikir.ts` ← TS types.

> We’re **not** using DB yet. Keep it static for MVP. (Optional: later expose `/api/zikir?search=` from server.)

---

## 2) Types

```ts
// client/src/types/zikir.ts
export type Zikir = {
  id: number;
  name: string;             // e.g. "SubhanAllah"
  arabic: string;           // Arabic text
  transliteration: string;  // e.g. "Subḥānallāh"
  translation: string;      // English meaning
  category: string;         // e.g. "tasbih"
};
```

---

## 3) Loader + Search (simple, fast, no deps)

```ts
// client/src/lib/zikir.ts
import zikir from "../../../shared/data/zikir.json";
import type { Zikir } from "../types/zikir";

export const getAllZikir = (): Zikir[] => zikir as Zikir[];

const norm = (s: string) =>
  s.toLowerCase().normalize("NFKD").replace(/[\u0300-\u036f]/g, "");

export const searchZikir = (q: string): Zikir[] => {
  const all = getAllZikir();
  const query = norm(q.trim());
  if (!query) return all.slice(0, 50); // default first 50
  return all.filter((z) => {
    return (
      norm(z.name).includes(query) ||
      norm(z.arabic).includes(query) ||
      norm(z.transliteration).includes(query) ||
      norm(z.translation).includes(query) ||
      norm(z.category).includes(query)
    );
  }).slice(0, 50);
};
```

---

## 4) Searchable Picker Component

```tsx
// client/src/components/ZikirPicker.tsx
import React, { useMemo, useState } from "react";
import type { Zikir } from "../types/zikir";
import { searchZikir } from "../lib/zikir";

type Props = {
  onSelect: (zikir: Zikir) => void;
  onClose?: () => void;
};

export default function ZikirPicker({ onSelect, onClose }: Props) {
  const [q, setQ] = useState("");
  const [focused, setFocused] = useState<number | null>(null);

  const results = useMemo(() => searchZikir(q), [q]);

  return (
    <div className="w-full max-w-3xl mx-auto rounded-2xl shadow-lg border bg-white">
      {/* Header */}
      <div className="p-4 border-b flex items-center gap-3">
        <input
          autoFocus
          value={q}
          onChange={(e) => setQ(e.target.value)}
          placeholder="Search zikir by English, Arabic, transliteration…"
          className="w-full rounded-xl border px-4 py-2 outline-none focus:ring"
        />
        {onClose && (
          <button
            onClick={onClose}
            className="text-sm px-3 py-2 rounded-lg border hover:bg-gray-50"
          >
            Close
          </button>
        )}
      </div>

      {/* Results */}
      <ul className="max-h-[60vh] overflow-auto divide-y">
        {results.map((z, idx) => (
          <li
            key={z.id}
            onMouseEnter={() => setFocused(idx)}
            onMouseLeave={() => setFocused(null)}
            className={`p-4 cursor-pointer transition ${
              focused === idx ? "bg-gray-50" : ""
            }`}
            onClick={() => onSelect(z)}
          >
            <div className="flex items-center justify-between">
              <div className="font-semibold">{z.name}</div>
              <span className="text-xs rounded-full bg-gray-100 px-2 py-1">
                {z.category}
              </span>
            </div>
            <div className="mt-1 text-xl leading-8">{z.arabic}</div>
            <div className="mt-1 text-sm text-gray-600 italic">
              {z.transliteration}
            </div>
            <div className="mt-1 text-sm text-gray-700">{z.translation}</div>
          </li>
        ))}

        {results.length === 0 && (
          <li className="p-6 text-center text-gray-500">No matches found.</li>
        )}
      </ul>
    </div>
  );
}
```

---

## 5) Usage Example (in your Create/Join screen)

```tsx
// client/src/pages/CreateRoom.tsx  (example)
import React, { useState } from "react";
import ZikirPicker from "../components/ZikirPicker";
import type { Zikir } from "../types/zikir";

export default function CreateRoom() {
  const [zikir, setZikir] = useState<Zikir | null>(null);
  const [open, setOpen] = useState(false);

  return (
    <div className="p-6 space-y-4">
      <h1 className="text-2xl font-bold">Create Majlis</h1>

      <div className="space-y-2">
        <label className="text-sm font-medium">Zikir</label>
        <button
          onClick={() => setOpen(true)}
          className="w-full text-left rounded-xl border px-4 py-3 hover:bg-gray-50"
        >
          {zikir ? (
            <div>
              <div className="font-semibold">{zikir.name}</div>
              <div className="text-gray-600 text-sm">{zikir.arabic}</div>
            </div>
          ) : (
            <span className="text-gray-500">Select zikir…</span>
          )}
        </button>
      </div>

      {/* other fields… */}

      {open && (
        <div className="fixed inset-0 z-50 bg-black/40 flex items-center justify-center p-4">
          <ZikirPicker
            onSelect={(z) => {
              setZikir(z);
              setOpen(false);
            }}
            onClose={() => setOpen(false)}
          />
        </div>
      )}
    </div>
  );
}
```

---

## 6) Keyboard & A11y (quick wins)

* Up/Down arrows to move focus between results; Enter to select focused.
* `aria-label` on search input; ensure contrast passes WCAG.
* Large tap targets (min 44–48px height per list item).

---

## 7) Optional Server Endpoint (future)

If we need server search later (very large lists), add:

* `server/src/routes/zikir.ts`
* `GET /api/zikir?search=…` → returns top 50 matches (same `searchZikir` logic).
* In client, switch loader to fetch from `/api/zikir`.

---

## 8) Acceptance (DoD)

* Typing in the search box filters across `name`, `arabic`, `transliteration`, `translation`, `category`.
* Selecting a row returns the full zikir object to the parent form.
* Works offline (static JSON).
* Zero new dependencies; Tailwind styles match existing setup.

**Note:** The 100-zikir JSON you already have should be saved at `shared/data/zikir.json` and imported as shown.
